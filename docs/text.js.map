{"version":3,"file":"text.js","sources":["../lib/text.ts"],"sourcesContent":["/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n'use strict';\n\nimport { Point, Draw, Rect } from './draw';\nimport { Grid } from './grid';\n\n\ninterface TextType\n{\n  /** What to draw */\n  text: string|undefined;\n  /** Horizontal alignment(left/center/right) */\n  hAlign: string;\n  /** Vertical alignment(top/middle/bottom) */\n  vAlign: string;\n  /** Text wrapping(nowrap/wrap/shrink) */\n  wrapping: string;\n  /** How to render the value */\n  formura: string;\n}\n\nclass TextLine\n{\n  text:string;\n  height:number\n  tm:TextMetrics;\n  constructor(text:string, height:number, tm:TextMetrics) {\n    this.text = text\n    this.height = height\n    this.tm = tm\n  }\n}\n\n/**\n * Draw the text in the cell.\n */\nexport class Text implements TextType\n{\n  /** What to draw */\n  text: string|undefined;\n  /** Horizontal alignment(left/center/right) */\n  hAlign: string;\n  /** Vertical alignment(top/middle/bottom) */\n  vAlign: string;\n  /** Text wrapping(nowrap/wrap/shrink) */\n  wrapping: string;\n  /** How to render the value */\n  formura: string;\n  constructor(text:string|TextType|undefined) {\n    switch (typeof text) {\n      case 'object':\n        this.text = text.text;\n        this.vAlign = text.vAlign || 'top';\n        this.hAlign = text.hAlign || 'left';\n        this.wrapping = text.wrapping || 'nowrap';\n        this.formura = text.formura || 'default';\n        break;\n      case 'string':\n        this.text = text;\n        this.vAlign = 'top';\n        this.hAlign = 'left';\n        this.wrapping = 'nowrap';\n        this.formura = 'default';\n        break;\n      default:\n        this.text = undefined;\n        this.vAlign = 'top';\n        this.hAlign = 'left';\n        this.wrapping = 'nowrap';\n        this.formura = 'default';\n        break;\n    }\n  }\n  get isValid() {\n    return !!this.text\n  }\n  willOverlap(ctx:Draw, rect:Rect) {\n    let text:string = this.text!\n    let tm = ctx.measureText(text)\n    return this.wrapping == 'nowrap' && tm.width > rect.width-2\n  }\n  /**\n   * Draw the text in the cell.\n   * \n   * Measure the size of the text to accommodate line breaks, and split the line if it is too long.\n   */\n  draw(grid:Grid, ctx:Draw, rect:Rect, isForce=false):Rect|undefined {\n    if (!this.isValid) {\n      return;\n    }\n    let text:string = this.text!\n    let textLines:Array<TextLine> = this.makeTextLines(text, ctx, rect, isForce)\n    return this.drawTextLines(grid, ctx, rect, textLines)\n  }\n  /** Measure the size of the text to accommodate line breaks, and split the line if it is too long. */\n  makeTextLines(text:string, ctx:Draw, rect:Rect, isForce:boolean):Array<TextLine> {\n    // ToDo: Since measureText () is a heavy process, the number of executions should be reduced.\n    let tm = ctx.measureText(text)\n    let height = tm.actualBoundingBoxAscent+tm.actualBoundingBoxDescent+1\n    let wrapping = isForce ? 'wrap' : this.wrapping\n    if (tm.width <= rect.width-2 || wrapping == 'nowrap') {\n      return [new TextLine(text, height, tm)]\n    }\n    let textLines:Array<TextLine> = []\n    let lineCount = 0\n    for(let i = text.length;i > 0; i--) {\n      let subtext = text.substring(0, i);\n      tm = ctx.measureText(subtext)\n      if (tm.width > rect.width-2) {\n        continue;\n      }\n      textLines.push(new TextLine(subtext, height, tm))\n      if (text==subtext) {\n        break;;\n      }\n      text = text.substring(subtext.length)\n      lineCount++\n      i = text.length+1\n    }\n    return textLines\n  }\n  /** Draw text split on multiple lines */\n  drawTextLines(grid:Grid, ctx:Draw, rect:Rect, textLines:Array<TextLine>):Rect {\n    let drawnRect = new Rect(new Point(), 0, 0)\n    for (let i = 0; i < textLines.length; i++) {\n      let line = textLines[i]\n      let tm = line.tm\n      let height = line.height\n      let text = line.text\n      let left = rect.left+tm.actualBoundingBoxLeft+1\n      let top = rect.top+tm.fontBoundingBoxAscent+height*i\n      switch(this.vAlign) {\n        case 'middle':\n          top = rect.top+height*i+Math.ceil((rect.height+tm.fontBoundingBoxAscent-tm.fontBoundingBoxDescent-height*(textLines.length-1))/2)\n          break;\n        case 'bottom':\n          top = rect.bottom-tm.fontBoundingBoxDescent-height*(textLines.length-i-1)\n          break;\n        default:\n          break;\n      }\n      switch(this.hAlign) {\n        case 'center':\n          left = rect.left+Math.ceil((rect.width-tm.width)/2)-1\n          break;\n        case 'right':\n          left = rect.right-tm.width-1\n          break;\n        default:\n          break;\n      }\n      ctx.fillText(text, {x:left, y:top})\n      let rectLine = new Rect({x:left-tm.actualBoundingBoxLeft, y:top-tm.actualBoundingBoxAscent}, tm.width, tm.actualBoundingBoxAscent+tm.actualBoundingBoxDescent)\n      drawnRect = drawnRect.union(rectLine)\n    }\n    return drawnRect\n  }\n}\n\n"],"names":[],"mappings":";;AAAA;AAuBA,MAAM,QAAQ,CAAA;AAKZ,IAAA,WAAA,CAAY,IAAW,EAAE,MAAa,EAAE,EAAc,EAAA;AACpD,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;AAChB,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;AACpB,QAAA,IAAI,CAAC,EAAE,GAAG,EAAE,CAAA;KACb;AACF,CAAA;AAED;;AAEG;MACU,IAAI,CAAA;AAYf,IAAA,WAAA,CAAY,IAA8B,EAAA;QACxC,QAAQ,OAAO,IAAI;AACjB,YAAA,KAAK,QAAQ;AACX,gBAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;gBACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC;gBACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC;gBAC1C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,SAAS,CAAC;gBACzC,MAAM;AACR,YAAA,KAAK,QAAQ;AACX,gBAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,gBAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,gBAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,gBAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,gBAAA,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;gBACzB,MAAM;AACR,YAAA;AACE,gBAAA,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;AACtB,gBAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,gBAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,gBAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,gBAAA,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;gBACzB,MAAM;AACT,SAAA;KACF;AACD,IAAA,IAAI,OAAO,GAAA;AACT,QAAA,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAA;KACnB;IACD,WAAW,CAAC,GAAQ,EAAE,IAAS,EAAA;AAC7B,QAAA,IAAI,IAAI,GAAU,IAAI,CAAC,IAAK,CAAA;QAC5B,IAAI,EAAE,GAAG,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;AAC9B,QAAA,OAAO,IAAI,CAAC,QAAQ,IAAI,QAAQ,IAAI,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAC,CAAC,CAAA;KAC5D;AACD;;;;AAIG;IACH,IAAI,CAAC,IAAS,EAAE,GAAQ,EAAE,IAAS,EAAE,OAAO,GAAC,KAAK,EAAA;AAChD,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;AACR,SAAA;AACD,QAAA,IAAI,IAAI,GAAU,IAAI,CAAC,IAAK,CAAA;AAC5B,QAAA,IAAI,SAAS,GAAmB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;AAC5E,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;KACtD;;AAED,IAAA,aAAa,CAAC,IAAW,EAAE,GAAQ,EAAE,IAAS,EAAE,OAAe,EAAA;;QAE7D,IAAI,EAAE,GAAG,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;QAC9B,IAAI,MAAM,GAAG,EAAE,CAAC,uBAAuB,GAAC,EAAE,CAAC,wBAAwB,GAAC,CAAC,CAAA;AACrE,QAAA,IAAI,QAAQ,GAAG,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAA;AAC/C,QAAA,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,GAAC,CAAC,IAAI,QAAQ,IAAI,QAAQ,EAAE;YACpD,OAAO,CAAC,IAAI,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,CAAA;AACxC,SAAA;QACD,IAAI,SAAS,GAAmB,EAAE,CAAA;AAElC,QAAA,KAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,YAAA,EAAE,GAAG,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;YAC7B,IAAI,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAC,CAAC,EAAE;gBAC3B,SAAS;AACV,aAAA;AACD,YAAA,SAAS,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,CAAA;YACjD,IAAI,IAAI,IAAE,OAAO,EAAE;gBACjB,MAAM;AACP,aAAA;YACD,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;AAErC,YAAA,CAAC,GAAG,IAAI,CAAC,MAAM,GAAC,CAAC,CAAA;AAClB,SAAA;AACD,QAAA,OAAO,SAAS,CAAA;KACjB;;AAED,IAAA,aAAa,CAAC,IAAS,EAAE,GAAQ,EAAE,IAAS,EAAE,SAAyB,EAAA;AACrE,QAAA,IAAI,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAC3C,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,YAAA,IAAI,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;AACvB,YAAA,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,CAAA;AAChB,YAAA,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;AACxB,YAAA,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;YACpB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,GAAC,EAAE,CAAC,qBAAqB,GAAC,CAAC,CAAA;AAC/C,YAAA,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAC,EAAE,CAAC,qBAAqB,GAAC,MAAM,GAAC,CAAC,CAAA;YACpD,QAAO,IAAI,CAAC,MAAM;AAChB,gBAAA,KAAK,QAAQ;AACX,oBAAA,GAAG,GAAG,IAAI,CAAC,GAAG,GAAC,MAAM,GAAC,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,GAAC,EAAE,CAAC,qBAAqB,GAAC,EAAE,CAAC,sBAAsB,GAAC,MAAM,IAAE,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAA;oBACjI,MAAM;AACR,gBAAA,KAAK,QAAQ;oBACX,GAAG,GAAG,IAAI,CAAC,MAAM,GAAC,EAAE,CAAC,sBAAsB,GAAC,MAAM,IAAE,SAAS,CAAC,MAAM,GAAC,CAAC,GAAC,CAAC,CAAC,CAAA;oBACzE,MAAM;AAGT,aAAA;YACD,QAAO,IAAI,CAAC,MAAM;AAChB,gBAAA,KAAK,QAAQ;oBACX,IAAI,GAAG,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,GAAC,EAAE,CAAC,KAAK,IAAE,CAAC,CAAC,GAAC,CAAC,CAAA;oBACrD,MAAM;AACR,gBAAA,KAAK,OAAO;oBACV,IAAI,GAAG,IAAI,CAAC,KAAK,GAAC,EAAE,CAAC,KAAK,GAAC,CAAC,CAAA;oBAC5B,MAAM;AAGT,aAAA;AACD,YAAA,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAC,CAAC,EAAC,IAAI,EAAE,CAAC,EAAC,GAAG,EAAC,CAAC,CAAA;AACnC,YAAA,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,EAAC,CAAC,EAAC,IAAI,GAAC,EAAE,CAAC,qBAAqB,EAAE,CAAC,EAAC,GAAG,GAAC,EAAE,CAAC,uBAAuB,EAAC,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,uBAAuB,GAAC,EAAE,CAAC,wBAAwB,CAAC,CAAA;AAC9J,YAAA,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;AACtC,SAAA;AACD,QAAA,OAAO,SAAS,CAAA;KACjB;AACF;;;;"}