{"version":3,"file":"grid.js","sources":["../lib/grid.ts"],"sourcesContent":["import { Point, Rect, Draw } from './draw';\r\nimport { Text } from './text';\r\n\r\nclass CellRange extends Rect\r\n{\r\n\r\n}\r\n\r\nclass CellData\r\n{\r\n    text: Text;\r\n    position:Point;\r\n    backgroundColor:string|undefined;\r\n    borderColor:string|undefined;\r\n    textColor:string|undefined;\r\n    fontSize:number|undefined;\r\n    constructor(position:Point,text:string|undefined) {\r\n        this.position = position\r\n        this.text = new Text(text)\r\n    }\r\n    draw(grid:Grid, ctx:Draw, rect:Rect) {\r\n        if (!this.text.isValid) {\r\n            return\r\n        }\r\n        // draw background\r\n        ctx.fillRect(rect, this.backgroundColor ?? grid.backgroundColor)\r\n        // draw text\r\n        ctx.ctx.fillStyle = this.textColor ?? grid.textColor\r\n        let textRect = this.text.draw(grid, ctx, rect)\r\n        if(textRect && rect.right < textRect?.right) {\r\n            // Draw a border for the entire text because the text overlaps to the cell to the right\r\n            let cellRect = grid.getCellRectByRange(new Rect(this.position, grid.maxColumns-this.position.x, 1))\r\n            for (let i = 1; i < cellRect[0].length; i++) {\r\n                if (!cellRect[0]) {\r\n                    break;\r\n                }\r\n                rect = new Rect(rect.topLeft, rect.width+cellRect[0][i].width,rect.height)\r\n                if (rect.right >= textRect?.right) {\r\n                    break;\r\n                }\r\n            }\r\n            ctx.fillRect(rect, this.backgroundColor ?? grid.backgroundColor)\r\n            ctx.ctx.fillStyle = this.textColor ?? grid.textColor\r\n            this.text.draw(grid, ctx, rect)\r\n        }\r\n        // draw border\r\n        ctx.strokeRect(rect, this.borderColor ?? grid.borderColor)\r\n    }\r\n}\r\n\r\nclass RowGrid\r\n{\r\n    cells: Array<CellData> = [];\r\n}\r\n\r\ntype TableSize = {\r\n    columns:number,\r\n    rows:number\r\n}\r\n\r\n/**\r\n * Main Grid\r\n * \r\n * It has all the data of Grid and has a function to draw.\r\n * Eventually the grid data will be retrieved and stored from the outside interface, \r\n * so this class will only have some data.\r\n */\r\nexport class Grid\r\n{\r\n    /** Table size held by Grid (columns, rows) */\r\n    gridSize: Point;\r\n    /** \r\n     * The coordinates of the upper left cell of the holding Grid Cell.\r\n     * \r\n     * If you hold a part of the Grid, it is not the origin. \r\n     */\r\n    gridRange:CellRange = new CellRange(new Point(), 0, 0);\r\n    /** A list of pixel width for each column in the Grid. */\r\n    widthList:Array<number> = [];\r\n    /** A list of pixel heights for each row in the Grid. */\r\n    heightList:Array<number> = [];\r\n    /**\r\n     * The entire grid data. \r\n     * \r\n     * This property will change its structure\r\n     * as it will eventually get only part of it dynamically.\r\n     */\r\n    rows:Array<RowGrid> = [];\r\n    backgroundColor:string = '#ffffff';\r\n    borderColor:string = '#a0a0a0';\r\n    textColor:string = 'black';\r\n    fontSize:number = 16;\r\n    constructor(options:TableSize|any) {\r\n        this.gridSize = new Point(options.columns, options.rows)\r\n        let cellWidth = options.cellWidth ?? 150;\r\n        let cellHeight = options.cellHeight ?? 24;\r\n        let cellData = options.cellData;\r\n        let range = new Rect(new Point(), this.gridSize)\r\n        this.widthList = new Array<number>(range.width).fill(cellWidth)\r\n        this.heightList = new Array<number>(range.height).fill(cellHeight)\r\n        this.resetCells(range, cellData)\r\n    }\r\n    resetCells(range:CellRange, cellData:Array<Array<any>>) {\r\n        this.gridRange = CellRange.clone(range)\r\n        this.rows = []\r\n        for(let r = range.top; r < range.bottom; r++) {\r\n            let row = new RowGrid();\r\n            for(let c = range.left; c < range.right; c++) {\r\n                let cell = new CellData(new Point(c,r), cellData[r][c])\r\n                row.cells.push(cell)\r\n            }\r\n            this.rows.push(row)\r\n        }\r\n    }\r\n    draw(ctx:Draw, range?:CellRange) {\r\n        // [r,c] the layout of cells\r\n        // [0,0][0,1]\r\n        // [1,0][1,1]\r\n        range = range ?? new CellRange(new Point(), this.maxColumns, this.maxRows)\r\n        console.log(range);\r\n        let cellRectMap = this.getCellRectByRange(range);\r\n        console.log(cellRectMap);\r\n        // Paint the entire background first\r\n        // (because the text is written over the adjacent cells under certain conditions)\r\n        let fullwidth = this.widthList.slice(range.left,range.right).reduce((p,c) => p+c)\r\n        let fullheight = this.widthList.slice(range.top,range.bottom).reduce((p,c) => p+c)\r\n        let entireCellRect = new Rect(new Point(), fullwidth, fullheight)\r\n        ctx.fillRect(entireCellRect, this.backgroundColor)\r\n\r\n        for(let r = range.top; r < range.bottom; r++) {\r\n            for(let c = range.left; c < range.right; c++) {\r\n                let cell = this.getCellData(c, r)\r\n                let cellRect = cellRectMap[r][c]\r\n                cell.draw(this, ctx, cellRect)\r\n            }\r\n        }\r\n    }\r\n    /** Returns the cell data at the specified position */\r\n    getCellData(column:number, row:number):CellData {\r\n        return this.rows[row].cells[column]\r\n    }\r\n    /** Get the drawing area of the specified Cell range in a two-dimensional list */\r\n    getCellRectByRange(range:CellRange):Array<Array<Rect>> {\r\n        let cellRect = []\r\n        let lefttop = new Point()\r\n        for(let r = range.top; r < range.bottom; r++) {\r\n            let height = this.heightList[r]\r\n            let cellRowRect = []\r\n            for(let c = range.left; c < range.right; c++) {\r\n                let width = this.widthList[c]\r\n                let cr = new Rect({x:lefttop.x,y:lefttop.y}, width, height)\r\n                cellRowRect.push(cr)\r\n                lefttop.x += width\r\n            }\r\n            cellRect.push(cellRowRect)\r\n            lefttop.x = 0\r\n            lefttop.y += height\r\n        }\r\n        return cellRect\r\n    }\r\n    get maxColumns() {\r\n        return this.gridSize.x;\r\n    } \r\n    get maxRows() {\r\n        return this.gridSize.y;\r\n    } \r\n}\r\n\r\n"],"names":[],"mappings":"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"}